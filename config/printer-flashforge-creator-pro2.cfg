# Basic Flashforge Creator Pro2 configuration with support for idex (two
# extruder), copy & mirror mode. This config uses only the safe print volume,
# extended volume possible.
#
# Compile the firmware for STM32F407 with no bootloader. Flashing with ST-LinkV2
# (clone) is necessary.
#
# Be careful when calibrating your z-offset, lower bed before. PID calibrate
# heaters.
#
# In your slicer, configure a printer with the following print volume:
# X width: 198mm, Y depth: 150mm, Z height: 150mm
# Use the START_PRINT function as start g-code, and the END_PRINT function as
# end gcode. Set the parameters defined in START_PRINT in your slicer.
#
# More detailed information at
# https://wiki.evilazrael.de/en/flashforge-creator-pro-2

[mcu]
serial: /dev/ttyACM0

[printer]
kinematics: cartesian
max_velocity: 150
max_accel: 1500
max_z_velocity: 30
max_z_accel: 100

[stepper_x]
step_pin: !PB5
dir_pin: PB6
enable_pin: !PB4
microsteps: 16
rotation_distance: 34
endstop_pin: PC6
position_min: -38
position_endstop: 236
position_max: 236
homing_speed: 50
second_homing_speed: 10
homing_positive_dir: true

[dual_carriage]
axis: x
safe_distance: 38
step_pin: !PC2
dir_pin: !PC3
enable_pin: !PC1
microsteps: 16
rotation_distance: 34
endstop_pin: PC7
position_min: -38
position_endstop: -38
position_max: 198
homing_speed: 50
second_homing_speed: 10

[stepper_y]
step_pin: !PF8
dir_pin: !PF9
enable_pin: !PF7
microsteps: 16
rotation_distance: 34
endstop_pin: !PG0
position_min: -3
position_endstop: -3
position_max: 152
homing_speed: 50
second_homing_speed: 10

[stepper_z]
step_pin: PF3
dir_pin: !PF4
enable_pin: !PF2
microsteps: 16
rotation_distance: 8
endstop_pin: !PG1
position_min: -4
position_endstop: -4
position_max: 172
homing_speed: 25
second_homing_speed: 5

[bed_screws]
screw1: 99, 80
screw1_name: Virtual Center
screw2: 99, 8
screw2_name: Center Front
screw3: 39, 143
screw3_name: Left Back
screw4: 139, 143
screw4_name: Right Back

# Right Extruder
[extruder]
step_pin: PE0
dir_pin: PE1
enable_pin: !PB9
microsteps: 16
rotation_distance: 32
nozzle_diameter: 0.4
filament_diameter: 1.75
max_extrude_only_distance: 500
heater_pin: PA3
sensor_type: extruder_sensors
ads1118_mux: 0
ads1118_pga: 7
ads1118_dr: 2
min_temp: 0
max_temp: 240
control: pid
pid_kp: 26.814
pid_ki: 1.374
pid_kd: 130.849

[extruder1]
step_pin: PE5
dir_pin: !PE6
enable_pin: !PE4
microsteps: 16
rotation_distance: 32
nozzle_diameter: 0.4
filament_diameter: 1.75
max_extrude_only_distance: 500
heater_pin: PA2
sensor_type: extruder_sensors
ads1118_mux: 3
ads1118_pga: 7
ads1118_dr: 2
min_temp: 0
max_temp: 240
control: pid
pid_kp: 22.862
pid_ki: 1.153
pid_kd: 113.281

[heater_bed]
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
min_temp: 0
max_temp: 120
control: pid
pid_kp: 70.740
pid_ki: 0.897
pid_kd: 1395.349

[temperature_sensor MCU]
sensor_type: temperature_mcu
min_temp: -40
max_temp: 105

[ads1118 extruder_sensors]
cs_pin: PF12
spi_bus: spi3a

[temperature_sensor Mainboard]
sensor_type: extruder_sensors_temp

[controller_fan mainboard_fan]
pin: PA0
off_below: 0.1666

[heater_fan right_extruder]
pin: PF14
max_power: 1.0
heater: extruder
heater_temp: 50.0

[heater_fan left_extruder]
pin: PB1
max_power: 1.0
heater: extruder1
heater_temp: 50.0

[fan_generic right_part_fan]
pin: PF13
max_power: 1.0

[fan_generic left_part_fan]
pin: PB0
max_power: 1.0

[led print_room]
red_pin: PG5
green_pin: PG7
blue_pin: PG6
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0

[gcode_macro PARK_RIGHT_EXTRUDER]
gcode:
    {% if printer.dual_carriage['carriage_1'] != 'INACTIVE' %}
        {action_raise_error("Can only park right extruder when PRIMARY in IDEX mode")}
    {% endif %}

    SAVE_GCODE_STATE NAME=park0
    G90
    G92 X{printer.toolhead.position.x}
    G1 X{printer.toolhead.axis_maximum.x} F{printer.toolhead.max_velocity * 60.0}
    SET_FAN_SPEED FAN=right_part_fan SPEED=0.0
    RESTORE_GCODE_STATE NAME=park0

[gcode_macro PARK_LEFT_EXTRUDER]
gcode:
    {% if printer.dual_carriage['carriage_1'] != 'PRIMARY' %}
        {action_raise_error("Can only park left extruder when PRIMARY in IDEX mode")}
    {% endif %}

    SAVE_GCODE_STATE NAME=park1
    G90
    :G92 X{printer.toolhead.position.x}
    G1 X{printer.toolhead.axis_minimum.x} F{printer.toolhead.max_velocity * 60.0}
    SET_FAN_SPEED FAN=left_part_fan SPEED=0.0
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro _ACTIVATE_DUPLICATE_MODE]
description: Setup for Copy & Mirror Modes
gcode:
    {% set mode = params.MODE %}
    {% set min_left = printer.configfile.settings.dual_carriage.position_min|float %}
    {% set center_x = 137 + min_left  %}

    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    G1 X{0 if mode == 'COPY' else (center_x - 20)} F{printer.toolhead.max_velocity * 60.0}

    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    G1 X{(center_x + 1) if mode == 'COPY' else (center_x + 20)} Y0 F{printer.toolhead.max_velocity * 60.0}

    SET_DUAL_CARRIAGE CARRIAGE=1 MODE={mode}
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    G92 X0 Y0

[gcode_macro START_PRINT]
description: Usage: START_PRINT [BED_TEMP=xx] [EXTRUDER_TEMP=xx]
    [IDEX_MODE=idex|copy|mirror]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set idex_mode = params.IDEX_MODE|default('IDEX')|lower %}

  G90
  G28
  G92 E0

  M117 Heatup Bed {BED_TEMP}°C Nozzle {EXTRUDER_TEMP}°C
  {% if params.BED_TEMP != "0" %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  {% endif %}

  {% if idex_mode == 'copy' %}
    _ACTIVATE_DUPLICATE_MODE MODE=COPY
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% elif idex_mode == 'mirror' %}
    _ACTIVATE_DUPLICATE_MODE MODE=MIRROR
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% else %}
    ACTIVATE_EXTRUDER EXTRUDER={printer.toolhead.extruder}
    {% if printer.dual_carriage['carriage_0'] == 'PRIMARY' %}
        SET_DUAL_CARRIAGE CARRIAGE=0
    {% else %}
        SET_DUAL_CARRIAGE CARRIAGE=1
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% endif %}

  {% if params.BED_TEMP != "0" %}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP*0.96} MAXIMUM={BED_TEMP*1.04}
  {% endif %}

  G1 Z10

[gcode_macro END_PRINT]
gcode:
  TURN_OFF_HEATERS

  SAVE_GCODE_STATE
  G90
  G1 Z{printer.toolhead.axis_maximum.z}
  G28 X Y
  M18

  M107 P0
  M107 P1

  RESTORE_GCODE_STATE
  M117 Print Complete

[gcode_macro G28]
rename_existing: G28.0
description: Autohome. Usage: G28 [X] [Y] [Z]
gcode:
    {% set active_extruder = printer.toolhead.extruder %}
    G28.0 {rawparams}

    ; When homing Y, move it to 0 to prevent cable stress
    {% if (params.X is undefined and params.Z is undefined) or params.Y is defined  %}
        SAVE_GCODE_STATE
        G90
        G1 Y0
        RESTORE_GCODE_STATE
    {% endif %}

    ; When homing Z, lower it afterwards to prevent crashes and scratches
    {% if (params.X is undefined and params.Y is undefined) or params.Z is defined  %}
        SAVE_GCODE_STATE
        G90
        G1 Z10
        RESTORE_GCODE_STATE
    {% endif %}

    {% if printer.toolhead.extruder != active_extruder %}
        ACTIVATE_EXTRUDER EXTRUDER={active_extruder}
    {% endif %}
    {% if printer.toolhead.extruder == 'extruder' %}
        SET_DUAL_CARRIAGE CARRIAGE=0
        G92 X{printer.toolhead.axis_maximum.x}
    {% else %}
        SET_DUAL_CARRIAGE CARRIAGE=1
        G92 X{printer.toolhead.axis_minimum.x}
    {% endif %}

[gcode_macro M104]
description: Set hotend temperature. Usage [S<temp>] [T<index>]
rename_existing: M104.0
gcode:
    {% set temperature = params.S|default(0)|float %}
    {% if printer.toolhead.extruder  == 'extruder' %}
        {% set extruder_index_default = 0 %}
    {% else %}
        {% set extruder_index_default = 1 %}
    {% endif %}
    {% set extruder_index = params.T|default(extruder_index_default)|int %}
    M104.0 S{temperature} T{extruder_index}

[gcode_macro M109]
description: Wait for Hotend Temperature. M109 [S<temp>] [T<index>]
rename_existing: M109.0
gcode:
    {% set temperature = params.S|default(0)|float %}
    {% if printer.toolhead.extruder  == 'extruder' %}
        {% set extruder_index_default = 0 %}
    {% else %}
        {% set extruder_index_default = 1 %}
    {% endif %}
    {% set extruder_index = params.T|default(extruder_index_default)|int %}
    M109.0 S{temperature} T{extruder_index}

[gcode_macro M106]
description: Set Fan Speed. Usage: M106 [P<index>] [S<speed>]
gcode:
    {% set fan_speed = params.S|default(255)|float / 255.0 %}

    {% if printer.dual_carriage['carriage_1'] is in (['COPY', 'MIRROR']) %}
        SET_FAN_SPEED FAN=left_part_fan SPEED={fan_speed}
        SET_FAN_SPEED FAN=right_part_fan SPEED={fan_speed}
    {% else %}
        {% set current_fan_index = 0 if printer.toolhead.extruder == 'extruder' else 1 %}
        {% set fan_index = params.P|default(current_fan_index)|int %}
        {% set fan = 'right_part_fan' if fan_index == 0 else 'left_part_fan' %}
        SET_FAN_SPEED FAN={fan} SPEED={fan_speed}
    {% endif %}

[gcode_macro M107]
description: Fan off. Usage: M107 [P<index>]
gcode:
    {% if params.P is defined %}
        M106 P{params.P} S0
    {% else %}
        M106 S0
    {% endif %}

[gcode_macro T0]
description: Activate the right extruder in IDEX mode
gcode:
    {% if printer.toolhead.extruder == 'extruder1' %}
        PARK_LEFT_EXTRUDER
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        G92 X{printer.toolhead.axis_maximum.x}
    {% endif %}

[gcode_macro T1]
description: Activate the left extruder in IDEX mode
gcode:
    {% if printer.toolhead.extruder == 'extruder' %}
        PARK_RIGHT_EXTRUDER
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        G92 X{printer.toolhead.axis_minimum.x}
    {% endif %}
